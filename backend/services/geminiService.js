import fetch from 'node-fetch';
import dotenv from 'dotenv';

dotenv.config();

class GeminiService {
  constructor() {
    this.apiKey = process.env.GEMINI_API_KEY;
    this.apiUrl = process.env.GEMINI_API_URL || 'https://generativelanguage.googleapis.com/v1/models/gemini-1.5-flash:generateContent';
    this.defaultSettings = {
      temperature: 0.7,
      topK: 40,
      topP: 0.95,
      maxOutputTokens: 1024,
    };
  }

  /**
   * Check if Gemini AI is properly configured
   */
  isConfigured() {
    return this.apiKey && this.apiKey !== 'your-gemini-api-key-here' && this.apiKey.length > 10;
  }

  /**
   * Call Gemini AI with a prompt and context
   * @param {string} prompt - The main prompt
   * @param {string} context - Additional context for the AI
   * @param {object} settings - Optional model settings
   * @returns {Promise<string>} - AI response
   */
  async callGeminiAI(prompt, context = '', settings = {}) {
    // Check if API key is configured
    if (!this.isConfigured()) {
      throw new Error('Gemini AI not configured. Please set GEMINI_API_KEY in environment variables.');
    }

    try {
      const requestBody = {
        contents: [{
          parts: [{
            text: `${context}\n\n${prompt}`
          }]
        }],
        generationConfig: {
          ...this.defaultSettings,
          ...settings
        }
      };

      const response = await fetch(`${this.apiUrl}?key=${this.apiKey}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestBody)
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(`Gemini API error: ${response.status} - ${errorData.error?.message || 'Unknown error'}`);
      }

      const data = await response.json();
      const aiResponse = data.candidates?.[0]?.content?.parts?.[0]?.text;

      if (!aiResponse) {
        throw new Error('No response generated by AI');
      }

      return aiResponse;
    } catch (error) {
      console.error('Gemini AI Error:', error);
      
      if (error.message.includes('API_KEY_INVALID') || error.message.includes('403')) {
        throw new Error('Invalid API Key: Please check your Gemini API key configuration.');
      } else if (error.message.includes('QUOTA_EXCEEDED')) {
        throw new Error('Quota Exceeded: Your Gemini API quota has been exceeded.');
      } else if (error.message.includes('404') || error.message.includes('NOT_FOUND')) {
        throw new Error('Model Not Found: The Gemini model is not available. This may be due to API key configuration issues.');
      } else if (error.message.includes('Publisher Model')) {
        throw new Error('API Configuration Error: The API key appears to be configured for Vertex AI instead of Generative Language API. Please use a Google AI Studio API key.');
      } else {
        throw new Error(`AI Service Error: ${error.message}`);
      }
    }
  }

  /**
   * Get medical diagnosis from Gemini AI
   * @param {Array} symptoms - Array of symptoms
   * @param {string} freeText - Additional symptom description
   * @returns {Promise<string>} - AI diagnosis response
   */
  async getMedicalDiagnosis(symptoms, freeText = '') {
    const context = `You are a medical AI assistant specializing in malaria and typhoid fever diagnosis.
    You should provide preliminary assessments based on symptoms, but always recommend consulting healthcare professionals.
    Be accurate, helpful, and emphasize the importance of proper medical testing.`;

    const prompt = `Based on these symptoms: ${symptoms.join(', ')}${freeText ? ` and additional details: "${freeText}"` : ''},
    please provide:
    1. Likelihood assessment for malaria (percentage)
    2. Likelihood assessment for typhoid fever (percentage)
    3. Key symptoms that support each diagnosis
    4. Immediate recommendations
    5. When to seek urgent medical care

    Format your response clearly and include confidence levels.`;

    return await this.callGeminiAI(prompt, context);
  }

  /**
   * Get health education response from Gemini AI
   * @param {string} question - Health education question
   * @returns {Promise<string>} - AI education response
   */
  async getHealthEducation(question) {
    const context = `You are a medical education AI assistant specializing in malaria and typhoid fever.
    Provide accurate, evidence-based health information. Always emphasize consulting healthcare professionals for medical advice.
    Be informative but not diagnostic. Use clear, patient-friendly language.`;

    const prompt = `Question about malaria or typhoid fever: "${question}"

    Please provide a comprehensive, accurate answer covering:
    - Direct answer to the question
    - Key facts and information
    - Prevention tips if relevant
    - When to seek medical care
    - Important disclaimers about consulting healthcare providers

    Keep the response informative but accessible to patients.`;

    return await this.callGeminiAI(prompt, context);
  }

  /**
   * Get symptom analysis from Gemini AI
   * @param {Array} symptoms - Array of symptoms
   * @param {string} additionalInfo - Additional symptom information
   * @returns {Promise<object>} - Structured AI analysis
   */
  async getSymptomAnalysis(symptoms, additionalInfo = '') {
    const context = `You are a medical AI assistant for symptom analysis. Focus on malaria and typhoid fever.
    Provide structured analysis with confidence levels. Always recommend professional medical consultation.`;

    const prompt = `Analyze these symptoms for malaria and typhoid fever:
    Symptoms: ${symptoms.join(', ')}
    Additional info: ${additionalInfo}

    Provide analysis in this format:
    MALARIA_LIKELIHOOD: [percentage]
    TYPHOID_LIKELIHOOD: [percentage]
    KEY_INDICATORS: [list key symptoms]
    RECOMMENDATIONS: [immediate actions]
    URGENCY: [low/moderate/high]
    NEXT_STEPS: [what to do next]`;

    const response = await this.callGeminiAI(prompt, context);
    
    // Parse structured response (basic parsing - could be enhanced)
    const analysis = {
      rawResponse: response,
      malariaLikelihood: this.extractPercentage(response, 'MALARIA_LIKELIHOOD'),
      typhoidLikelihood: this.extractPercentage(response, 'TYPHOID_LIKELIHOOD'),
      urgency: this.extractValue(response, 'URGENCY') || 'moderate'
    };

    return analysis;
  }

  /**
   * Extract percentage from AI response
   * @private
   */
  extractPercentage(text, label) {
    const regex = new RegExp(`${label}:\\s*(\\d+)%?`, 'i');
    const match = text.match(regex);
    return match ? parseInt(match[1]) : 0;
  }

  /**
   * Extract value from AI response
   * @private
   */
  extractValue(text, label) {
    const regex = new RegExp(`${label}:\\s*([^\\n]+)`, 'i');
    const match = text.match(regex);
    return match ? match[1].trim() : null;
  }
}

export default new GeminiService();
